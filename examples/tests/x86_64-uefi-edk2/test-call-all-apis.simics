load-module tsffs

@tsffs = SIM_create_object(SIM_get_class("tsffs"), "tsffs", [])
tsffs.log-level 4
@tsffs.iface.tsffs.set_start_on_harness(True)
@tsffs.iface.tsffs.set_start_magic_number(1)
@tsffs.iface.tsffs.set_stop_on_harness(True)
@tsffs.iface.tsffs.set_stop_magic_number(2)
@tsffs.iface.tsffs.set_timeout(3.0)
@tsffs.iface.tsffs.add_exception_solution(14)
@tsffs.iface.tsffs.add_exception_solution(6)
@tsffs.iface.tsffs.remove_exception_solution(14)
@tsffs.iface.tsffs.remove_exception_solution(6)
@tsffs.iface.tsffs.set_all_exceptions_are_solutions(True)
@tsffs.iface.tsffs.set_all_exceptions_are_solutions(False)
@tsffs.iface.tsffs.add_breakpoint_solution(1)
@tsffs.iface.tsffs.remove_breakpoint_solution(1)
@tsffs.iface.tsffs.set_all_breakpoints_are_solutions(True)
@tsffs.iface.tsffs.set_all_breakpoints_are_solutions(False)
@tsffs.iface.tsffs.set_cmplog_enabled(False)
@tsffs.iface.tsffs.set_cmplog_enabled(True)
@tsffs.iface.tsffs.set_generate_random_corpus(True)
@import time
@print("Sleeping")
@time.sleep(30)
@tsffs.iface.tsffs.set_corpus_directory("%simics%/corpus")
@tsffs.iface.tsffs.set_solutions_directory("%simics%/solutions")
@tsffs.iface.tsffs.set_iterations(1000)
@tsffs.iface.tsffs.set_use_snapshots(True)
@tsffs.iface.tsffs.tokenize_executable("%simics%/test.efi")

load-target "qsp-x86/uefi-shell" namespace = qsp machine:hardware:storage:disk0:image = "minimal_boot_disk.craff"

script-branch {
    bp.time.wait-for seconds = 15
    qsp.serconsole.con.input "\n"
    bp.time.wait-for seconds = .5
    qsp.serconsole.con.input "FS0:\n"
    bp.time.wait-for seconds = .5
    local $manager = (start-agent-manager)
    qsp.serconsole.con.input ("SimicsAgent.efi --download " + (lookup-file "%simics%/test.efi") + "\n")
    bp.time.wait-for seconds = .5
    qsp.serconsole.con.input "test.efi\n"
}

script-branch {
    bp.time.wait-for seconds = 240
    quit 1
}

run