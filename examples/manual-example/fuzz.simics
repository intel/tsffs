# Read the start and stop addresses from the files containing them (see Dockerfile for
# how they are generated)
@simenv.start_addr = int(open("START_ADDRESS").read().strip(), 16)
@simenv.stop_addr = int(open("STOP_ADDRESS").read().strip(), 16)

# Configure the fuzzer
load-module tsffs
@tsffs = SIM_create_object(SIM_get_class("tsffs"), "tsffs", [])
@tsffs.log_level = 4
@tsffs.iface.tsffs.set_start_on_harness(False)
@tsffs.iface.tsffs.set_stop_on_harness(False)
@tsffs.iface.tsffs.set_timeout(3.0)
@tsffs.iface.tsffs.add_exception_solution(14)
@tsffs.iface.tsffs.set_generate_random_corpus(True)
@tsffs.iface.tsffs.set_use_snapshots(False)
@tsffs.iface.tsffs.tokenize_executable("%simics%/test.efi")

# load the target
load-target "qsp-x86/uefi-shell" namespace = qsp machine:hardware:storage:disk0:image = "minimal_boot_disk.craff"

# Set a breakpoint for start and stop events
$start_bp = (bp.memory.break -x $start_addr)
$stop_bp = (bp.memory.break -x $stop_addr)

# Continuously wait for the start bp to occur after reset, and call the start method
script-branch {
    while 1 {
        bp.wait-for-breakpoint id = $start_bp
        echo "Got start BP"
        local $rdi = (qsp.mb.cpu0.core[0][0].read-reg reg-name = "rdi")
        echo ("Starting with buffer " + $rdi)
        @tsffs.iface.tsffs.start_with_maximum_size(conf.qsp.mb.cpu0.core[0][0], simenv.rdi, 8)
    }
}

# Continuously wait for the stop bp to occur after reset, and call the start method
script-branch {
    while 1 {
        bp.wait-for-breakpoint id = $stop_bp
        echo "Got stop BP"
        @tsffs.iface.tsffs.stop()
    }
}

# Enter the EFI shell and run the EFI application
script-branch {
    bp.console_string.wait-for qsp.serconsole.con "Shell>"
    qsp.serconsole.con.input "FS0:\n"
    bp.time.wait-for seconds = 1.0
    local $manager = (start-agent-manager)
    qsp.serconsole.con.input ("SimicsAgent.efi --download " + (lookup-file "%simics%/test.efi") + "\n")
    bp.time.wait-for seconds = 1.0
    # Set an execute breakpoint on the address we found by disassembling
    # the EFI binary (see the dockerfile for the rizin command used)
    qsp.serconsole.con.input "test.efi\n"
}

run