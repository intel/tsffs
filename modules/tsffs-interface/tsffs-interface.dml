// Copyright (C) 2023 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

dml 1.4;

header %{
#include "tsffs-interface.h"
%}

extern typedef struct {
    void (*set_start_on_harness)(conf_object_t * obj, bool start_on_harness);
    void (*set_start_magic_number)(conf_object_t * obj, int64 magic_number);
    void (*set_stop_on_harness)(conf_object_t * obj, bool stop_on_harness);
    void (*set_stop_magic_number)(conf_object_t * obj, int64 magic_number);
    void (*start)(conf_object_t * obj, conf_object_t * cpu, generic_address_t testcase_address, generic_address_t size_address, bool virt);
    void (*start_with_maximum_size)(conf_object_t * obj, conf_object_t * cpu, generic_address_t testcase_address, uint32 maximum_size, bool virt);
    attr_value_t (*start_without_buffer)(conf_object_t * obj, conf_object_t * cpu);
    void (*stop)(conf_object_t * obj);
    void (*solution)(conf_object_t * obj, uint64 id, char * message);
    void (*set_use_snapshots)(conf_object_t * obj, bool use_snapshots);
    void (*set_timeout)(conf_object_t * obj, double timeout);
    void (*add_exception_solution)(conf_object_t * obj, int64 exception);
    void (*remove_exception_solution)(conf_object_t * obj, int64 exception);
    void (*set_all_exceptions_are_solutions)(conf_object_t * obj, bool all_exceptions_are_solutions);
    void (*add_breakpoint_solution)(conf_object_t * obj, breakpoint_id_t breakpoint);
    void (*remove_breakpoint_solution)(conf_object_t * obj, breakpoint_id_t breakpoint);
    void (*set_all_breakpoints_are_solutions)(conf_object_t * obj, bool all_breakpoints_are_solutions);
    void (*set_cmplog_enabled)(conf_object_t * obj, bool enabled);
    void (*set_corpus_directory)(conf_object_t * obj, char * corpus_directory);
    void (*set_solutions_directory)(conf_object_t * obj, char * solutions_directory);
    void (*set_generate_random_corpus)(conf_object_t * obj, bool generate_random_corpus);
    void (*set_iterations)(conf_object_t * obj, size_t iterations);
    attr_value_t (*get_configuration)(conf_object_t * obj);
    void (*tokenize_executable)(conf_object_t * obj, char * executable_file);
    void (*tokenize_src)(conf_object_t * obj, char * source_file);
    void (*add_token_file)(conf_object_t * obj, char * token_file);
    void (*add_trace_processor)(conf_object_t * obj, conf_object_t * cpu);
    void (*add_architecture_hint)(conf_object_t * obj, conf_object_t * cpu, char * hint);
    void (*repro)(conf_object_t * obj, char * testcase_file);
} tsffs_interface_t;

extern const char *const TSFFS_INTERFACE;
